<?xml version="1.0" encoding="UTF-8"?>
<!-- 
	Steps we need to take from this point:
	
	1) Build all classes
	2) Build Javadoc
	3) Build and Run Tests
	4) Build dist jars

-->
<project name="frame2" default="all">

   <property name="proj-base" value="."/>
   
	<target name="all" depends="clean, compile, test-one, test, dist, javadoc"/>
	
	<target name="init">
		<property file="override.properties"/>
		<property file="env.properties"/>
		<property file="build.properties"/>
		
		<path id="framework-compile-class-path">
			<pathelement location="${tomcat-common}/jsp-api.jar"/>
			<pathelement location="${tomcat-common}/servlet-api.jar"/>
			<pathelement location="${jaxb-home}/jaxb-api.jar"/>
			<pathelement location="${log4j-home}/log4j.jar"/>
			<pathelement location="${taglibs-standard-home}/standard.jar"/>
			<pathelement location="${commons-validator-home}/commons-validator.jar"/>
			<pathelement location="${commons-fileupload-home}/commons-fileupload.jar"/>
		</path>
		
		<path id="taglib-compile-class-path">
			<pathelement location="${framework_build}"/>
			<pathelement location="${tomcat-common}/jsp-api.jar"/>
			<pathelement location="${tomcat-common}/servlet-api.jar"/>
		</path>
		
		<path id="template-compile-class-path">
			<pathelement location="${framework_build}"/>
			<pathelement location="${tomcat-common}/jsp-api.jar"/>
			<pathelement location="${tomcat-common}/servlet-api.jar"/>
		</path>
		
		<path id="framework-test-compile-class-path">
			<pathelement location="${framework_build}"/>
			<pathelement location="${tomcat-common}/jsp-api.jar"/>
			<pathelement location="${tomcat-common}/servlet-api.jar"/>
			<pathelement location="${commons-digester-home}/commons-digester.jar"/>
			<pathelement location="${strutstest-home}/strutstest-2.1.0.jar"/>
			<pathelement location="${junit-home}/junit.jar"/>
			<pathelement location="${junit-addons-home}/junit-addons.jar"/>
			<pathelement location="${commons-fileupload-home}/commons-fileupload.jar"/>
			<pathelement location="${httpclient-home}/HTTPClient.zip"/>
			<pathelement location="${jaxb-home}/jaxb-api.jar"/>
			<pathelement location="${jaxb-home}/jaxb-impl.jar"/>
			<pathelement location="${jaxb-home}/jaxb-libs.jar"/>
			<pathelement location="${log4j-home}/log4j.jar"/>
			<pathelement location="${commons-validator-home}/commons-validator.jar"/>
			<pathelement location="${jwsdp-shared-home}/namespace.jar"/>
			<pathelement location="${jwsdp-shared-home}/relaxngDatatype.jar"/>
			<pathelement location="${jwsdp-shared-home}/jax-qname.jar"/>
		</path>
		
		<path id="taglib-test-compile-class-path">
			<pathelement location="${framework_build}"/>
			<pathelement location="${taglib_build}"/>
		</path>
		
		<path id="template-test-compile-class-path">
			<pathelement location="${framework_build}"/>
			<pathelement location="${template_build}"/>
		</path>
		
		<path id="test-app-compile-class-path">
			<pathelement location="${framework_build}"/>
			<pathelement location="${taglib_build}"/>
			<pathelement location="${framework_test_build}"/>
			<pathelement location="${template_build}"/>
			<pathelement location="${tomcat-common}/jsp-api.jar"/>
			<pathelement location="${tomcat-common}/servlet-api.jar"/>
			<pathelement location="${jwsdp-shared-home}/relaxngDatatype.jar"/>
			<!-- 
			<pathelement location="${jwsdp-shared-home}/xsdlib.jar"/>
			-->
			<pathelement location="${jwsdp-shared-home}/jax-qname.jar"/>
			<pathelement location="${jwsdp-shared-home}/namespace.jar"/>
			<pathelement location="${jaxb-home}/jaxb-impl.jar"/>
			<pathelement location="${jaxb-home}/jaxb-api.jar"/>
			<pathelement location="${jaxb-home}/jaxb-libs.jar"/>
			<pathelement location="${cactus-home}/cactus-1.5.jar"/>
		</path>
		
		<path id="no-commons-run-class-path">
			<pathelement location="${framework_build}"/>
			<pathelement location="${framework_test_build}"/>
			<pathelement location="${taglib_build}"/>
			<pathelement location="${taglib_test_build}"/>
			<!-- <pathelement location="${template_build}"/> -->
			<pathelement location="${jwsdp-shared-home}/relaxngDatatype.jar"/>
			<pathelement location="${jwsdp-shared-home}/xsdlib.jar"/>
			<pathelement location="${jwsdp-shared-home}/jax-qname.jar"/>
			<pathelement location="${jwsdp-shared-home}/namespace.jar"/>
			<pathelement location="${tomcat-common}/servlet-api.jar"/>
			<!-- <pathelement location="${commons-fileupload-home}/commons-fileupload.jar"/> -->
			<pathelement location="${jaxb-home}/jaxb-impl.jar"/>
			<pathelement location="${jaxb-home}/jaxb-api.jar"/>
			<pathelement location="${jaxb-home}/jaxb-libs.jar"/>
			<pathelement location="${log4j-home}/log4j.jar"/>
			<pathelement location="${commons-logging-home}/commons-logging.jar"/>
			<pathelement location="${commons-collections-home}/commons-collections.jar"/>
			<pathelement location="${strutstest-home}/strutstest-2.1.0.jar"/>
			<pathelement location="${commons-digester-home}/commons-digester.jar"/>
			<pathelement location="${commons-beanutils-home}/commons-beanutils.jar"/>
			<pathelement location="${httpclient-home}/HTTPClient.zip"/>
			<pathelement location="${junit-addons-home}/junit-addons.jar"/>
			<pathelement location="${jakarta-oro-home}/jakarta-oro.jar"/>
			<pathelement location="${jwsdp-shared-home}/xercesImpl.jar"/>
			<pathelement location="${jwsdp-shared-home}/dom.jar"/>
		</path>
		
		<path id="run-class-path">
			<path refid="no-commons-run-class-path"/>
			<pathelement location="${commons-validator-home}/commons-validator.jar"/>
			<pathelement location="${commons-fileupload-home}/commons-fileupload.jar"/>
			<!-- <pathelement location="${jwsdp-endorsed-home}/dom.jar"/>
			<pathelement location="${jwsdp-endorsed-home}/xercesImpl.jar"/> -->
		</path>
		
		<path id="cactus-run-class-path">
			<pathelement location="${framework_build}"/>
			<pathelement location="${framework_test_build}"/>
			<pathelement location="${taglib_build}"/>
			<pathelement location="${taglib_test_build}"/>
			<!-- <pathelement location="${template_build}"/> -->
			<pathelement location="${jwsdp-shared-home}/relaxngDatatype.jar"/>
			<pathelement location="${jwsdp-shared-home}/xsdlib.jar"/>
			<pathelement location="${jwsdp-shared-home}/jax-qname.jar"/>
			<pathelement location="${jwsdp-shared-home}/namespace.jar"/>
			<pathelement location="${tomcat-common}/servlet-api.jar"/>
			<pathelement location="${commons-fileupload-home}/commons-fileupload.jar"/>
			<pathelement location="${jaxb-home}/jaxb-impl.jar"/>
			<pathelement location="${jaxb-home}/jaxb-api.jar"/>
			<pathelement location="${jaxb-home}/jaxb-libs.jar"/>
			<pathelement location="${log4j-home}/log4j.jar"/>
			<pathelement location="${commons-validator-home}/commons-validator.jar"/>
			<pathelement location="${commons-logging-home}/commons-logging.jar"/>
			<pathelement location="${commons-collections-home}/commons-collections.jar"/>
			<pathelement location="${strutstest-home}/strutstest-2.1.0.jar"/>
			<pathelement location="${commons-digester-home}/commons-digester.jar"/>
			<pathelement location="${commons-beanutils-home}/commons-beanutils.jar"/>
			<pathelement location="${httpclient-home}/HTTPClient.zip"/>
			<pathelement location="${junit-addons-home}/junit-addons.jar"/>
			<pathelement location="${jakarta-oro-home}/jakarta-oro.jar"/>
			<!-- <pathelement location="${jwsdp-endorsed-home}/dom.jar"/>
			<pathelement location="${jwsdp-endorsed-home}/xercesImpl.jar"/> -->
			<pathelement location="${cactus-home}/cactus-1.5.jar"/>
            <pathelement location="${cactus-home}/aspectjrt-1.1.1.jar"/>
            <pathelement location="${cactus-home}/commons-httpclient-2.0.jar"/>
            <pathelement location="${jwsdp-shared-home}/xercesImpl.jar"/>
			<pathelement location="${jwsdp-shared-home}/dom.jar"/>
		</path>
		
		<mkdir dir="${local-out}"/>
	</target>
	
	<target name="clean" depends="init">
		<delete dir="${local-out}"/>
		<delete dir="${dist}"/>
	</target>
	
	<!-- 
		Compile:
			1) Framework
			2) Tag library
			3) Template Tag Library
	-->
	<target name="compile" depends="init, compile_framework, compile_taglib, compile_template_taglib">
	</target>
	
	<target name="compile_framework" depends="init">
		<mkdir dir="${framework_build}"/>
		<javac deprecation="on"
          destdir="${framework_build}"
          srcdir="./framework/src"
          classpathref="framework-compile-class-path"
        />
		<copy todir="${framework_build}">
			<fileset dir="./framework/src">
				<exclude name="**/*.java"/>
			</fileset>
		</copy>
	</target>
	
	<target name="compile_taglib" depends="init">
		<mkdir dir="${taglib_build}"/>
		<javac deprecation="on"
          destdir="${taglib_build}"
          srcdir="./tag/src"
          classpathref="taglib-compile-class-path"
        />
	</target>
	
	<target name="compile_template_taglib" depends="init">
		<mkdir dir="${template_build}"/>
		<javac deprecation="on"
          destdir="${template_build}"
          srcdir="./template_tag/src"
          classpathref="template-compile-class-path"
        />
	</target>
	
	<target name="compile_test" depends="compile, compile_framework_test, compile_tag_test, compile_template_test">
	</target>
	
	<target name="compile_framework_test" depends="compile">
		<mkdir dir="${framework_test_build}"/>
		<javac deprecation="on"
          destdir="${framework_test_build}"
          srcdir="./framework/test/src"
          classpathref="framework-test-compile-class-path"
        />
		<copy todir="${framework_test_build}">
			<fileset dir="./framework/test/src">
				<exclude name="**/*.java"/>
			</fileset>
		</copy>
	</target>
	
	<target name="compile_tag_test" depends="compile">
		<mkdir dir="${taglib_test_build}"/>
		<javac deprecation="on"
          destdir="${taglib_test_build}"
          srcdir="./tag/test/src"
          classpathref="taglib-test-compile-class-path"
        />
	</target>
	
	<target name="compile_template_test" depends="compile">
    	<echo message="No tests defined for template tags - skipping compile"/>
	</target>
	
	<taskdef name="junit" classname="org.apache.tools.ant.taskdefs.optional.junit.JUnitTask"
		classpath="${junit-home}/junit.jar"/>
	
	<target name="test" depends="unit_tests, special_tests, container_tests, junit_report">
	</target>
	
	<target name="unit_tests" depends="compile, compile_test, test-one" unless="TEST_CASE">
		<mkdir dir="${reports}"/>
		<junit printsummary="on" dir="."
	          failureProperty="tests-failed"
	          showoutput="${show-test-output}"
	          haltonfailure="${halt-on-failure}"
	          fork="yes">
	      <sysproperty key="java.util.logging.config.file" value="${std-log-properties}"/> 
	      <jvmarg value="-Xint"/>
	      <formatter type="xml"/>
	      <batchtest todir="${reports}">
	         <fileset dir="./framework/test/src">
	            <include name="**/Test*.java" />
	            <exclude name="**/TestMissingCommonsValidation.java"/>
	         	<exclude name="**/TestMissingFileUpload.java"/>
	         </fileset>
	         <fileset dir="./tag/test/src">
	            <include name="**/Test*.java" />
	         </fileset>
	         <!--
	         <fileset dir="./template_tag/test/src">
	            <include name="**/Test*.java" />
	         </fileset>
	         -->
	      </batchtest>
	      <classpath>
			 <path refid="run-class-path"/>
	      </classpath>
	
	   </junit>
	</target>
	
	<target name="special_tests" depends="compile, compile_test, test-one" unless="TEST_CASE">
		<junit printsummary="on" dir="."
	          failureProperty="tests-failed"
	          showoutput="${show-test-output}"
	          haltonfailure="${halt-on-failure}"
	          fork="yes">
	      <sysproperty key="java.util.logging.config.file" value="${std-log-properties}"/> 
	      <jvmarg value="-Xint"/>
	      <formatter type="xml"/>
	      <batchtest todir="${reports}">
	         <fileset dir="./framework/test/src">
	            <include name="**/TestMissingCommonsValidation.java" />
	         	<include name="**/TestMissingFileUpload.java"/>
	         </fileset>
	      </batchtest>
	      <classpath>
			 <path refid="no-commons-run-class-path"/>
	      </classpath>
	
	   </junit>
	</target>
	
	<target name="junit_report" depends="init">
		<junitreport todir="${reports}">
	      <fileset dir="${reports}">
	         <include name="TEST-*.xml"/>
	      </fileset>
	      <report format="frames" todir="${reports}/html"/>
	   </junitreport>
	</target>
	
	<target name="test-one" depends="compile" if="TEST_CASE">
		<mkdir dir="${reports}"/>
		<junit printsummary="on" showoutput="yes" dir=".">
			<sysproperty key="java.util.logging.config.file" value="${std-log-properties}"/> 
			<jvmarg value="-Xint"/>
			<!-- <jvmarg line="${jpda-args}${jpda-port}"/> -->
			<formatter type="xml"/>
			<test name="${TEST_CASE}" fork="yes" todir="${reports}"/>
			<classpath>
				<path refid="run-class-path"/>
	      	</classpath>
		</junit>
	</target>
	
	<target name="dist" depends="compile">
		<property name="taglib-META-INF" value="${taglib_build}/META-INF"/>
    	<property name="taglib-tld-file" value="./tag/src/taglib.tld"/>
    	<property name="template-META-INF" value="${template_build}/META-INF"/>
    	<property name="template-tld-file" value="./template_tag/src/template_taglib.tld"/>
		<mkdir dir="${dist.lib}"/>
		<jar jarfile="${dist.lib}/${framework_jar}"
			basedir="${framework_build}"/>		
			
		<mkdir dir="${taglib-META-INF}"/>
		<copy file="${taglib-tld-file}" todir="${taglib-META-INF}"/>
		<jar jarfile="${dist.lib}/${taglib_jar}"
			basedir="${taglib_build}"/>
			
		<mkdir dir="${template-META-INF}"/>
		<copy file="${template-tld-file}" tofile="${template-META-INF}/taglib.tld"/>
		<jar jarfile="${dist.lib}/${template_jar}"
			basedir="${template_build}"/>
	</target>
	
	<target name="javadoc" depends="compile">
		<mkdir dir="${dist.docs}/api"/>
		<path id="doc-source-path">
			<pathelement path="./framework/src"/>
			<pathelement path="./tag/src"/>
			<pathelement path="./template_tag/src"/>
		</path>
		<path id="doc-classpath">
			<pathelement location="${tomcat-common}/jsp-api.jar"/>
			<pathelement location="${tomcat-common}/servlet-api.jar"/>
			<pathelement location="${jaxb-home}/jaxb-api.jar"/>
			<pathelement location="${jaxb-home}/jaxb-impl.jar"/>
			<pathelement location="${jaxb-home}/jaxb-libs.jar"/>
			<pathelement location="${commons-fileupload-home}/commons-fileupload.jar"/>
			<pathelement location="${log4j-home}/log4j.jar"/>
			<pathelement location="${taglibs-standard-home}/standard.jar"/>
			<pathelement location="${commons-validator-home}/commons-validator.jar"/>
		</path>
		<!--
		<javadoc sourcepathref="doc-source-path"
			destdir="${dist.docs}"
			windowTitle="Frame2 API"
            doctitle="Frame2"
            classpathref="doc-classpath"
            packagenames="org.*">
        -->
        <javadoc 
			destdir="${dist.docs}/api"
			windowTitle="Frame2 API"
            doctitle="Frame2"
            classpathref="doc-classpath"
            breakiterator="yes">
            <packageset dir="./framework/src" defaultexcludes="yes">
     			<include name="org/megatome/frame2/errors/**" />
     			<include name="org/megatome/frame2/event/**"/>
     			<include name="org/megatome/frame2/jaxb/**"/>
     			<include name="org/megatome/frame2/log/**"/>
     			<exclude name="org/megatome/frame2/log/impl/**"/>
     			<include name="org/megatome/frame2/plugin/**"/>
     			<include name="org/megatome/frame2/tagsupport/**"/>
			</packageset>
			<fileset dir="./framework/src">
     			<include name="org/megatome/frame2/**/*Exception.java"/>
				<exclude name="org/megatome/frame2/log/LoggerException.java"/>
				<exclude name="org/megatome/frame2/plugin/PluginException.java"/>
     			<exclude name="org/megatome/frame2/validator/CommonsValidatorException.java"/>
     			<exclude name="org/megatome/frame2/util/soap/SOAPException.java"/>
     			<exclude name="org/megatome/frame2/util/dom/DocumentException.java"/>
     			<exclude name="org/megatome/frame2/introspector/IntrospectorException.java"/>
     			<exclude name="org/megatome/frame2/template/TemplateException.java"/>
     			<exclude name="org/megatome/frame2/util/sax/ParserException.java"/>
     			<include name="org/megatome/frame2/Globals.java"/>
     			<include name="org/megatome/frame2/front/*RequestProcessor.java"/>
     			<include name="org/megatome/frame2/validator/CommonsFieldValidator.java"/>
			</fileset>
			<!--
			<packageset dir="./tag/src" defaultexcludes="yes">
				<include name="org/megatome/frame2/**"/>
			</packageset>
			<packageset dir="./template_tag/src" defaultexcludes="yes">
				<include name="**/*.java"/>
			</packageset>
            -->
			<bottom>
				<![CDATA[<em>Copyright (C) 2004, Megatome Technologies</em>
				<br>All Rights Reserved]]>
			</bottom>
			<link href="http://java.sun.com/j2se/1.4.2/docs/api/"/>
			<link href="http://java.sun.com/j2ee/1.4/docs/api/"/>
			<link href="http://jakarta.apache.org/commons/validator/apidocs/"/>
		</javadoc>
	</target>
	
	<target name="binary-dist" depends="all">
		<!-- Create tar and zip containing:
			1) Frame2 jars
			2) Frame2 Api docs
			3) Extra libs for Frame2
			4) License files
		-->
	</target>
	
	<target name="container_tests" depends="init, dist" if="run_container_tests">
		<!-- <antcall target="deploy_war"/> -->
		<echo message="WAR must be manually deployed and Tomcat running for now..."/>
		<antcall target="tagunit_tests"/>
		<antcall target="cactus_tests"/>
		<!-- <antcall target="undeploy"/> -->
	</target>
	
	<target name="compile_test_app" depends="init, dist">
		<mkdir dir="test_app/WEB-INF/classes"/>
		<javac deprecation="off"
          destdir="test_app/WEB-INF/classes"
          srcdir="./test_app/src"
          classpathref="test-app-compile-class-path"
        />
        <copy todir="test_app/WEB-INF/classes">
			<fileset dir="./test_app/src">
				<exclude name="**/*.java"/>
			</fileset>
		</copy>
		<javac deprecation="off"
          destdir="test_app/WEB-INF/classes"
          srcdir="./test_app/test/src"
          classpathref="test-app-compile-class-path"
        />
        <copy todir="test_app/WEB-INF/classes">
			<fileset dir="./test_app/test/src">
				<exclude name="**/*.java"/>
			</fileset>
		</copy>
	</target>
	
	<target name="war" depends="dist, compile_test, compile_test_app">
	<!--
		<mkdir dir="${test-app-out}"/>
		<copy todir="${test-app-out}">
    		<fileset dir="./test_app">
      			<exclude name="**/*.java"/>
    		</fileset>
  		</copy>
	-->
      <delete file="${local-out}/${war}"/>
      <war destfile="${local-out}/${war}" update="no" webxml="test_app/WEB-INF/web.xml">
         <fileset dir="test_app">
            <include name="**/*.jsp"/>
            <include name="**/*.jspf"/>
            <include name="**/*.html"/>
         </fileset>
         <classes dir="test_app/WEB-INF/classes"/>
         <webinf dir="test_app/WEB-INF">
            <include name="**/*.xml"/>
            <include name="*.wsdd"/>
            <exclude name="web.xml"/>
         </webinf>
         <webinf dir="tag/src">
         	<include name="*.tld"/>
         </webinf>
         <webinf dir="template_tag/src">
         	<include name="*.tld"/>
         </webinf>
         <lib dir="${axis-home}">
            <include name="axis.jar"/>
            <include name="wsdl4j.jar"/>
            <include name="commons-discovery.jar"/>
         </lib>
         <lib dir="${commons-logging-home}">
         	<include name="commons-logging.jar"/>
         </lib>
         <lib dir="${junit-home}">
            <include name="junit.jar"/>
         </lib>
         <lib dir="${jaxb-home}">
            <include name="**/*.jar"/>
         </lib>
         <lib dir="${cactus-home}">
            <include name="cactus-1.5.jar"/>
            <include name="aspectjrt-1.1.1.jar"/>
            <include name="commons-httpclient-2.0.jar"/>
         </lib>
         <lib dir="${taglibs-standard-home}">
            <include name="jstl.jar"/>
            <include name="standard.jar"/>
         </lib>
         <lib dir="${commons-fileupload-home}">
         	<include name="commons-fileupload.jar"/>
         </lib>
         <lib dir="${commons-validator-home}">
         	<include name="commons-validator.jar"/>
         </lib>
         <lib dir="${dist.lib}">
            <include name="**/*.jar"/>
         </lib>
         <lib dir="${log4j-home}">
            <include name="log4j.jar"/>
         </lib>
         <lib dir="${tagunit-home}">
            <include name="tagunit.jar"/>
         </lib>
      </war>
   </target>
   
   <taskdef name="tagunit" classname="org.tagunit.ant.TagUnitTask" classpath="${tagunit-home}/tagunit.jar"/>

   <target name="tagunit_tests" depends="init" if="run_container_tests">
   	  <mkdir dir="${reports}"/>
   	  <delete file="${local-test-out}/${tagunit-result-file}"/>
      <tagunit url="${tomcat-url}/${war-name}/test/servlet/RunTests?uri=/tagunit/tags/index.jsp"
               ignoreWarnings="false"
               stopOnFail="false"
      			formatter="org.tagunit.ant.XmlFormatter"
      			logfile="${local-test-out}/${tagunit-result-file}"/>
   	
   	  <!-- The XML generated by tagunit does not work with the JunitReport task
   	       need to massage it -->
   	  <copy file="${local-test-out}/${tagunit-result-file}" todir="${reports}"/>
   	  <xmlproperty file="${local-test-out}/${tagunit-result-file}" collapseAttributes="true"/>
   	  <replace file="${reports}/${tagunit-result-file}" token="${testsuite.name}" value="${tagunit-replace-name}"/>
   </target>      
   
   <target name="cactus_tests" depends="init" if="run_container_tests">
   	  <mkdir dir="${reports}"/>
		<junit printsummary="on" dir="."
	          failureProperty="tests-failed"
	          showoutput="${show-test-output}"
	          haltonfailure="${halt-on-failure}"
	          fork="yes">
	      <sysproperty key="java.util.logging.config.file" value="${std-log-properties}"/> 
	      <jvmarg value="-Xint"/>
	      <formatter type="xml"/>
	      <batchtest todir="${reports}">
	         <fileset dir="./test_app/test/src">
	            <include name="**/Test*.java" />
	         </fileset>
	      </batchtest>
	      <classpath>
			 <path refid="cactus-run-class-path"/>
			 <pathelement location="./test_app/WEB-INF/classes"/>
			 <pathelement location="${tomcat-common}/jsp-api.jar"/>
			<pathelement location="${tomcat-common}/servlet-api.jar"/>
			<pathelement location="${template_build}"/>
	      </classpath>
	
	   </junit>
   </target>
   
   <target name="clean-app" depends="init">
      <echo message="Deleting ${war} from ${tomcat-home}"/>
      <delete file="${tomcat-home}/webapps/${war}"/>
      <delete dir="${tomcat-home}/webapps/${local-webapp}" failonerror="false"/>
      <delete dir="${tomcat-home}/work/**/${local-webapp}/**" failonerror="false"/>
      <delete dir="app/work/**/${local-webapp}/**" failonerror="false"/>
   </target>

   <!-- Note that this approach of removing and re-installing the
   application is necessary because the reload management feature
   does not support apps deployed through the webapp path. -->
<!--
   <taskdef name="deploy"    classname="org.apache.catalina.ant.DeployTask"
	classpath="${tomcat-home}/server/lib/catalina-ant.jar"/>
   <taskdef name="install"   classname="org.apache.catalina.ant.InstallTask"
    classpath="${tomcat-home}/server/lib/catalina-ant.jar"/>
   <taskdef name="list"      classname="org.apache.catalina.ant.ListTask"
	classpath="${tomcat-home}/server/lib/catalina-ant.jar"/>
   <taskdef name="reload"    classname="org.apache.catalina.ant.ReloadTask"
	classpath="${tomcat-home}/server/lib/catalina-ant.jar"/>
   <taskdef name="remove"    classname="org.apache.catalina.ant.RemoveTask"
	classpath="${tomcat-home}/server/lib/catalina-ant.jar"/>
   <taskdef name="resources" classname="org.apache.catalina.ant.ResourcesTask"
	classpath="${tomcat-home}/server/lib/catalina-ant.jar"/>
   <taskdef name="roles"     classname="org.apache.catalina.ant.RolesTask"
	classpath="${tomcat-home}/server/lib/catalina-ant.jar"/>
   <taskdef name="start"     classname="org.apache.catalina.ant.StartTask"
	classpath="${tomcat-home}/server/lib/catalina-ant.jar"/>
   <taskdef name="stop"      classname="org.apache.catalina.ant.StopTask"
	classpath="${tomcat-home}/server/lib/catalina-ant.jar"/>
   <taskdef name="undeploy"  classname="org.apache.catalina.ant.UndeployTask"
	classpath="${tomcat-home}/server/lib/catalina-ant.jar"/>
	-->
<!--
   <target name="list" depends="init">
      <list url="${tomcat-url}/manager"
            username="${tomcat-username}"
            password="${tomcat-password}"/>
   </target>
-->
	<!--
   <target name="remove" depends="init">
      <remove url="${tomcat-url}/manager"
              username="${admin-username}"
              password="${admin-password}"
              path="/${war-name}"/>
   </target>
   
   <target name="undeploy" depends="init">
      <undeploy url="${tomcat-url}/manager"
              username="${admin-username}"
              password="${admin-password}"
              path="/${war-name}"/>
   </target>

	<target name="deploy_war" depends="init" if="run_container_tests">
		<antcall target="war"/>
		<antcall target="install"/>
	</target>
	
   <target name="install" depends="init, war">
   <echo message="war path: ${basedir}/${war}"/>
   <copy file="${local-out}/${war}" tofile="${tomcat-home}/webapps/${war}"/>
      <install url="${tomcat-url}/manager"
               username="${admin-username}"
               password="${admin-password}"
               path="/${war-name}"
               war="file:${war}"/>
      <echo message="sleeping ${sleeptime_secs} for context load"/>
      <sleep seconds="${sleeptime_secs}"/>
   </target>

   <target name="reload" depends="compile">
      <reload url="${tomcat-url}/manager"
              username="${tomcat-username}"
              password="${tomcat-password}"
              path="/${war-name}"/>
   </target>
	-->
<!-- ****************************************************************** -->
<target name="build_images" depends="build_binary, build_source_all, build_source_only"/>

<target name="build_binary" depends="init, dist, javadoc">
	<mkdir dir="${image_dist}"/>
	<copy todir="${image_dist}" includeEmptyDirs="false">
		<fileset dir="${dist}">
			<exclude name="**/${product-name}*/**"/>
			<include name="**/docs/**"/>
			<include name="**/lib/**"/>
		</fileset>
		<fileset dir="${proj-base}">
			<include name="LICENSE.txt"/>
			<include name="samples/**"/>
			<include name="support_files/**"/>
			<include name="docs/**"/>
			<include name="README"/>
			
			<exclude name="**/build/**"/>
			<exclude name="**/work/**"/>
			<exclude name="**/dist/**"/>
			<exclude name="**/classes/**"/>
			<exclude name="override.properties"/>
			<exclude name="**/.ignore"/>
		</fileset>
	</copy>
	<copy todir="${image_dist}">
		<fileset dir="${proj-base}">
			<include name="ext/**/standard.jar"/>
		</fileset>
	</copy>
	<ant antfile="${image_dist}/samples/build.xml" target="build-blankwar" inheritall="false"/>
	<!-- <ant antfile="${image_dist}/samples/build.xml" target="build-examplewar" inheritall="false"/>
	<ant antfile="${image_dist}/samples/build.xml" target="build-template-examplewar" inheritall="false"/> -->
	
	<!-- Need to clean up samples -->
	<delete dir="${image_dist}/ext"/>
	<delete dir="${image_dist}/samples/blankwar"/>
	<delete dir="${image_dist}/samples/example"/>
	<delete dir="${image_dist}/samples/soap-example"/>
	<delete dir="${image_dist}/samples/template-example"/>
	<delete file="${image_dist}/samples/build.xml"/>
	<delete file="${image_dist}/samples/building.txt"/>
	<delete file="${image_dist}/samples/env.properties"/>
	<move todir="${image_dist}/samples">
		<fileset dir="${image_dist}/samples/webapps">
			<include name="**/*.war"/>
		</fileset>
	</move>
	<delete dir="${image_dist}/samples/webapps"/>

	<tar destfile="${dist}/${image_dist_name}.tar.gz"
		compression="gzip"
		longfile="gnu">
		<tarfileset dir="${image_dist}"
			preserveLeadingSlashes="true">
		</tarfileset>
	</tar>
	<delete dir="${image_dist}"/>
</target>

<target name="build_source_all" depends="init, dist, javadoc">
	<mkdir dir="${image_dist}"/>
	<copy todir="${image_dist}" includeEmptyDirs="false">
		<fileset dir="${dist}">
			<exclude name="**/${product-name}*/**"/>
			<include name="**/docs/**"/>
			<!-- <include name="**/lib/**"/> -->
		</fileset>
		<fileset dir="${proj-base}">
			<include name="LICENSE.txt"/>
			<include name="README"/>
			<include name="build.xml"/>
			<include name="building.txt"/>
			<include name="env.properties"/>
			<include name="std.properties"/>
			<include name="samples/**"/>
			<include name="support_files/**"/>
			<include name="docs/**"/>
			<include name="ext/**"/>
			
			<exclude name="**/build/**"/>
			<exclude name="**/work/**"/>
			<exclude name="**/dist/**"/>
			<exclude name="**/classes/**"/>
			<!-- <exclude name="**/samples/**"/> -->
			<exclude name="override.properties"/>
			<include name="framework/**"/>
			<include name="tag/**"/>
			<include name="template_tag/**"/>
			<include name="test_app/**"/>
			<exclude name="**/.ignore"/>
		</fileset>
	</copy>
	
	<!--
	<ant antfile="${image_dist}/samples/build.xml" target="build-blankwar" inheritall="false"/>
	-->

	<tar destfile="${dist}/${image_src_all_dist_name}.tar.gz"
		compression="gzip"
		longfile="gnu">
		<tarfileset dir="${image_dist}"
			preserveLeadingSlashes="true">
		</tarfileset>
	</tar>
	<delete dir="${image_dist}"/>
</target>
	
<target name="build_source_only" depends="init, dist, javadoc">
	<mkdir dir="${image_dist}"/>
	<copy todir="${image_dist}" includeEmptyDirs="false">
		<fileset dir="${dist}">
			<exclude name="**/${product-name}*/**"/>
			<include name="**/docs/**"/>
			<!-- <include name="**/lib/**"/> -->
		</fileset>
		<fileset dir="${proj-base}">
			<include name="LICENSE.txt"/>
			<include name="README"/>
			<include name="build.xml"/>
			<include name="building.txt"/>
			<include name="env.properties"/>
			<include name="std.properties"/>
			<include name="samples/**"/>
			<include name="support_files/**"/>
			<include name="docs/**"/>
			<!-- <include name="ext/**"/> -->
			
			<exclude name="**/build/**"/>
			<exclude name="**/work/**"/>
			<exclude name="**/dist/**"/>
			<exclude name="**/classes/**"/>
			<!-- <exclude name="**/samples/**"/> -->
			<exclude name="override.properties"/>
			<include name="framework/**"/>
			<include name="tag/**"/>
			<include name="template_tag/**"/>
			<include name="test_app/**"/>
			<exclude name="**/.ignore"/>
		</fileset>
	</copy>
	
	<!--
	<ant antfile="${image_dist}/samples/build.xml" target="build-blankwar" inheritall="false"/>
	-->

	<tar destfile="${dist}/${image_src_only_dist_name}.tar.gz"
		compression="gzip"
		longfile="gnu">
		<tarfileset dir="${image_dist}"
			preserveLeadingSlashes="true">
		</tarfileset>
	</tar>
	<delete dir="${image_dist}"/>
</target>

</project>
